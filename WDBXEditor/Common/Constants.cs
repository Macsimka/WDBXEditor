using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace WDBXEditor.Common
{
    public static class Constants
    {
        public const string VERSION = "1.1.9.a";
        public const string AUTO_GENERATED = "AutoGenerated";
        public const StringComparison IGNORECASE = StringComparison.CurrentCultureIgnoreCase;
        public static readonly string DEFINITION_DIR = Path.Combine(Path.GetDirectoryName(Application.ExecutablePath), "Definitions/");
        public static readonly string TEMP_FOLDER = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "WDBXEditor");

        [Flags]
        public enum HeaderFlags : short
        {
            None = 0x0,
            OffsetMap = 0x1,
            RelationshipData = 0x2,
            IndexMap = 0x4,
            Unknown = 0x8,
            Compressed = 0x10,
        }

        public enum TextWowEnum
        {
            enUS,
            enGB,
            koKR,
            frFR,
            deDE,
            enCN,
            zhCN,
            enTW,
            zhTW,
            esES,
            esMX,
            ruRU,
            ptPT,
            ptBR,
            itIT,
            Unk,
        }

        public enum UpdateMode
        {
            Insert,
            Update,
            Replace
        }

        public enum ImportFlags
        {
            None,
            FixIds,
            TakeNewest
        }

        public enum CompressionType
        {
            None = 0,
            Immediate = 1,
            Sparse = 2,
            Pallet = 3,
            PalletArray = 4,
            SignedImmediate = 5
        }

        public enum Expansion
        {
            Alpha,
            Beta,
            Classic,
            TBC,
            WotLK,
            Cata,
            MoP,
            WoD,
        }

        public enum ExpansionFinalBuild
        {
            Alpha = 3494,
            Beta = 3988,
            Classic = 6005,
            TBC = 8606,
            WotLK = 12340,
            Cata = 15595,
            MoP = 18414,
            WoD = 21742,
        }

        #region CommonDataColumn

        public static readonly short[] CommonDataBits = [0, 16, 24, 0, 0]; //String Int16 Byte Float Int32

        public static readonly Dictionary<TypeCode, byte> CommonDataTypes = new Dictionary<TypeCode, byte>()
        {
            { TypeCode.String, 0 },
            { TypeCode.Int16, 1 },
            { TypeCode.UInt16, 1 },
            { TypeCode.Byte, 2 },
            { TypeCode.SByte, 2 },
            { TypeCode.Single, 3 },
            { TypeCode.Int32, 4 },
            { TypeCode.UInt32, 4 },
        };
        #endregion

        #region Client Builds
        public static bool IsBuild(int build, Expansion expansion)
        {
            switch (expansion)
            {
                case Expansion.Alpha:
                    return build <= (int)ExpansionFinalBuild.Alpha;
                case Expansion.Beta:
                    return build > (int)ExpansionFinalBuild.Alpha && build <= (int)ExpansionFinalBuild.Beta;
                case Expansion.Classic:
                    return build > (int)ExpansionFinalBuild.Beta && build <= (int)ExpansionFinalBuild.Classic;
                case Expansion.TBC:
                    return build > (int)ExpansionFinalBuild.Classic && build <= (int)ExpansionFinalBuild.TBC;
                case Expansion.WotLK:
                    return build > (int)ExpansionFinalBuild.TBC && build <= (int)ExpansionFinalBuild.WotLK;
                case Expansion.Cata:
                    return build > (int)ExpansionFinalBuild.WotLK && build <= (int)ExpansionFinalBuild.Cata;
                case Expansion.MoP:
                    return build > (int)ExpansionFinalBuild.Cata && build <= (int)ExpansionFinalBuild.MoP;
                case Expansion.WoD:
                    return build > (int)ExpansionFinalBuild.MoP && build <= (int)ExpansionFinalBuild.WoD;
            }

            return false;
        }

        public static string BuildText(int build)
        {
            var first = Builds.First();
            var last = Builds.Last();
            string lastText = $"{first.Value} ({build})";

            if (build <= first.Key)
                return lastText; //First build
            else if (build >= last.Key)
                return $"{last.Value} ({build})"; //Last build

            foreach (var b in Builds)
            {
                if (build < b.Key)
                    return lastText;

                lastText = $"{b.Value} ({build})";
            }

            return lastText;
        }

        private static readonly SortedDictionary<int, string> Builds = new SortedDictionary<int, string>()
        {
            {3368, "Alpha 0.5.3"},
            {3494, "Alpha 0.5.5"},
            {3694, "Beta 0.7.0"},
            {3702, "Beta 0.7.1"},
            {3712, "Beta 0.7.6"},
            {3734, "Beta 0.8.0"},
            {3807, "Beta 0.9.0"},
            {3810, "Beta 0.9.1"},
            {3892, "Beta 0.10.0"},
            {3925, "Beta 0.11.0"},
            {3988, "Beta 0.12.0"},
            {3980, "Classic 1.0.0"},
            {3989, "Classic 1.0.1"},
            {4044, "Classic 1.1.0"},
            {4062, "Classic 1.1.1"},
            {4125, "Classic 1.1.2"},
            {4147, "Classic 1.2.0"},
            {4150, "Classic 1.2.1"},
            {4196, "Classic 1.2.2"},
            {4211, "Classic 1.2.3"},
            {4222, "Classic 1.2.4"},
            {4284, "Classic 1.3.0"},
            {4297, "Classic 1.3.1"},
            {4341, "Classic 1.4.0"},
            {4364, "Classic 1.4.1"},
            {4375, "Classic 1.4.2"},
            {4442, "Classic 1.5.0"},
            {4499, "Classic 1.5.1"},
            {4500, "Classic 1.6.0"},
            {4544, "Classic 1.6.1"},
            {4671, "Classic 1.7.0"},
            {4695, "Classic 1.7.1"},
            {4735, "Classic 1.8.0"},
            {4769, "Classic 1.8.1"},
            {4784, "Classic 1.8.2"},
            {4807, "Classic 1.8.3"},
            {4878, "Classic 1.8.4"},
            {4937, "Classic 1.9.0"},
            {4983, "Classic 1.9.1"},
            {4996, "Classic 1.9.2"},
            {5059, "Classic 1.9.3"},
            {5086, "Classic 1.9.4"},
            {5195, "Classic 1.10.0"},
            {5230, "Classic 1.10.1"},
            {5302, "Classic 1.10.2"},
            {5428, "Classic 1.11.0"},
            {5464, "Classic 1.11.2"},
            {5595, "Classic 1.12.0"},
            {5875, "Classic 1.12.1"},
            {6005, "Classic 1.12.2"},
            {6080, "TBC 2.0.0"},
            {6180, "TBC 2.0.1"},
            {6299, "TBC 2.0.3"},
            {6314, "TBC 2.0.4"},
            {6320, "TBC 2.0.5"},
            {6337, "TBC 2.0.6"},
            {6383, "TBC 2.0.7"},
            {6403, "TBC 2.0.8"},
            {6448, "TBC 2.0.10"},
            {6546, "TBC 2.0.12"},
            {6729, "TBC 2.1.0"},
            {6739, "TBC 2.1.1"},
            {6803, "TBC 2.1.2"},
            {6898, "TBC 2.1.3"},
            {7272, "TBC 2.2.0"},
            {7318, "TBC 2.2.2"},
            {7359, "TBC 2.2.3"},
            {7561, "TBC 2.3.0"},
            {7741, "TBC 2.3.2"},
            {7799, "TBC 2.3.3"},
            {8089, "TBC 2.4.0"},
            {8125, "TBC 2.4.1"},
            {8278, "TBC 2.4.2"},
            {8606, "TBC 2.4.3"},
            {8820, "WotLK 3.0.1"},
            {9061, "WotLK 3.0.2"},
            {9183, "WotLK 3.0.3"},
            {9506, "WotLK 3.0.8"},
            {9551, "WotLK 3.0.9"},
            {9757, "WotLK 3.1.0"},
            {9835, "WotLK 3.1.1"},
            {9889, "WotLK 3.1.2"},
            {9947, "WotLK 3.1.3"},
            {10314, "WotLK 3.2.0"},
            {10505, "WotLK 3.2.2"},
            {11159, "WotLK 3.3.0"},
            {11599, "WotLK 3.3.2"},
            {11723, "WotLK 3.3.3"},
            {12340, "WotLK 3.3.5"},
            {12759, "Cata 4.0.0"},
            {13205, "Cata 4.0.1"},
            {13329, "Cata 4.0.3"},
            {13623, "Cata 4.0.6"},
            {14007, "Cata 4.1.0"},
            {14480, "Cata 4.2.0"},
            {14545, "Cata 4.2.2"},
            {15050, "Cata 4.3.0"},
            {15211, "Cata 4.3.2"},
            {15354, "Cata 4.3.3"},
            {15595, "Cata 4.3.4"},
            {15851, "MoP 5.0.1"},
            {15882, "MoP 5.0.3"},
            {16016, "MoP 5.0.4"},
            {16135, "MoP 5.0.5"},
            {16357, "MoP 5.1.0"},
            {16826, "MoP 5.2.0"},
            {17128, "MoP 5.3.0"},
            {17399, "MoP 5.4.0"},
            {17538, "MoP 5.4.1"},
            {17688, "MoP 5.4.2"},
            {18019, "MoP 5.4.7"},
            {18414, "MoP 5.4.8"},
            {19027, "WoD 6.0.2"},
            {19033, "WoD 6.0.2"},
            {19034, "WoD 6.0.2"},
            {19085, "WoD 6.0.3"},
            {19102, "WoD 6.0.3"},
            {19103, "WoD 6.0.3"},
            {19116, "WoD 6.0.3"},
            {19200, "WoD 6.0.3"},
            {19206, "WoD 6.0.3"},
            {19227, "WoD 6.0.3"},
            {19243, "WoD 6.0.3"},
            {19342, "WoD 6.0.3"},
            {19678, "WoD 6.1.0"},
            {19701, "WoD 6.1.0"},
            {19702, "WoD 6.1.0"},
            {19802, "WoD 6.1.2"},
            {19831, "WoD 6.1.2"},
            {19854, "WoD 6.1.2"},
            {19865, "WoD 6.1.2"},
            {20173, "WoD 6.2.0"},
            {20182, "WoD 6.2.0a"},
            {20201, "WoD 6.2.0"},
            {20216, "WoD 6.2.0"},
            {20253, "WoD 6.2.0"},
            {20318, "WoD 6.2.0"},
            {20338, "WoD 6.2.0"},
            {20444, "WoD 6.2.2"},
            {20490, "WoD 6.2.2"},
            {20574, "WoD 6.2.2"},
            {20726, "WoD 6.2.3"},
            {20779, "WoD 6.2.3"},
            {20886, "WoD 6.2.3"},
            {21315, "WoD 6.2.4"},
            {21336, "WoD 6.2.4"},
            {21343, "WoD 6.2.4"},
            {21345, "WoD 6.2.4"},
            {21348, "WoD 6.2.4"},
            {21355, "WoD 6.2.4"},
            {21463, "WoD 6.2.4"},
            {21676, "WoD 6.2.4"},
            {21742, "WoD 6.2.4"},
        };
        #endregion

        #region File Types
        public static string FileRegexPattern => $"^(.{SupportedFileTypes["All Files"].Replace(";*.", "|.*.")})$";

        public static readonly Dictionary<string, string> SupportedFileTypes = new()
        {
            {"All Files", "*.dbc;*.db2;*.adb;*.wdb;DBCache.bin" },
            {"DBC Files", "*.dbc" },
            {"DB2 Files", "*.db2" },
            {"ADB Files", "*.adb" },
            {"WDB Files", "*.wdb" },
            {"Hotfix Files", "DBCache.bin" },
        };
        #endregion
    }
}
